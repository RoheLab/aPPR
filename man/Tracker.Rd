% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tracker.R
\name{Tracker}
\alias{Tracker}
\title{R6 class to manage personalized pagerank calculations}
\description{
R6 class to manage personalized pagerank calculations

R6 class to manage personalized pagerank calculations
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{seeds}}{A character vector of the seed nodes.}

\item{\code{path}}{A character vector of nodes whose neighborhoods we
examined.}

\item{\code{stats}}{A \code{\link[tibble:tibble]{tibble::tibble()}} with one row for each visited
node and the following columns:
\itemize{
\item \code{name}: Name of a node (character).
\item \code{r}: Current estimate of residual per out-degree for a node.
\item \code{p}: Current estimate of the pagerank for a node.
\item \code{in_degree}: Number of incoming edges to a node.
\item \code{out_degree}: Number of outcoming edges from a node.
}}

\item{\code{failed}}{A character vector of nodes that could not be visited.}

\item{\code{graph}}{An abstract graph object.}

\item{\code{alpha}}{Teleportation constant from Algorithm 3.}

\item{\code{alpha_prime}}{Transformed teleportation constant from Algorithm 3.}

\item{\code{epsilon}}{Error tolerance.}

\item{\code{max_visits}}{Maximum number of nodes to visit before terminating.}

\item{\code{tau}}{Regularization parameter used in Algorithm 4.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Tracker-new}{\code{Tracker$new()}}
\item \href{#method-Tracker-print}{\code{Tracker$print()}}
\item \href{#method-Tracker-remaining}{\code{Tracker$remaining()}}
\item \href{#method-Tracker-current_approximation_error}{\code{Tracker$current_approximation_error()}}
\item \href{#method-Tracker-in_tracker}{\code{Tracker$in_tracker()}}
\item \href{#method-Tracker-in_failed}{\code{Tracker$in_failed()}}
\item \href{#method-Tracker-add_seed}{\code{Tracker$add_seed()}}
\item \href{#method-Tracker-add_to_path}{\code{Tracker$add_to_path()}}
\item \href{#method-Tracker-add_nodes}{\code{Tracker$add_nodes()}}
\item \href{#method-Tracker-add_failed}{\code{Tracker$add_failed()}}
\item \href{#method-Tracker-update_p}{\code{Tracker$update_p()}}
\item \href{#method-Tracker-update_r_neighbor}{\code{Tracker$update_r_neighbor()}}
\item \href{#method-Tracker-update_r_self}{\code{Tracker$update_r_self()}}
\item \href{#method-Tracker-regularize}{\code{Tracker$regularize()}}
\item \href{#method-Tracker-calculate_ppr}{\code{Tracker$calculate_ppr()}}
\item \href{#method-Tracker-clone}{\code{Tracker$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-new"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-new}{}}}
\subsection{Method \code{new()}}{
Create a new Tracker object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$new(graph, alpha, epsilon, tau, max_visits)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{graph}}{See \code{\link[=appr]{appr()}}.}

\item{\code{alpha}}{See \code{\link[=appr]{appr()}}.}

\item{\code{epsilon}}{See \code{\link[=appr]{appr()}}.}

\item{\code{tau}}{See \code{\link[=appr]{appr()}}.}

\item{\code{max_visits}}{See \code{\link[=appr]{appr()}}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{Tracker} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-print"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-print}{}}}
\subsection{Method \code{print()}}{
Print the tibble containing the current state of the pagerank
calculation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-remaining"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-remaining}{}}}
\subsection{Method \code{remaining()}}{
Determine nodes that need to be visited. Note that,
if there is a node with zero out degree, you will never
leave from that node. So it is important to make sure
we never add nodes with zero out degree into the tracker.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$remaining()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A character vector of node names with current residuals
greater than \code{epsilon}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-current_approximation_error"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-current_approximation_error}{}}}
\subsection{Method \code{current_approximation_error()}}{
Determine current quality of approximation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$current_approximation_error()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A numeric vector of length one with the current worst
error bound.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-in_tracker"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-in_tracker}{}}}
\subsection{Method \code{in_tracker()}}{
Check if there is already a row for a particular node
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$in_tracker(nodes)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nodes}}{Character name of node(s) in the graph.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{TRUE} if there is a row for \code{node}, \code{FALSE} if there
is not a row for \code{node}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-in_failed"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-in_failed}{}}}
\subsection{Method \code{in_failed()}}{
Check if we previously failed to visit a node
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$in_failed(node)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node}}{Character name of a node in the graph.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{TRUE} if we failed to visit \code{node}, \code{FALSE} otherwise.
Note that this function will return \code{FALSE} if \code{node} is new
and we haven't seen it before.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-add_seed"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-add_seed}{}}}
\subsection{Method \code{add_seed()}}{
Create an entry for \code{node} in the tracker. Assumes that
\code{node} is not in the tracker yet, and does not check if
this is the case.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$add_seed(seeds, preference)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{seeds}}{The name of the node in the graph as a length 1
character vector.}

\item{\code{preference}}{TODO: recall what on earth this is.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-add_to_path"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-add_to_path}{}}}
\subsection{Method \code{add_to_path()}}{
TODO
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$add_to_path(node)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node}}{The name of the node in the graph as a length 1
character vector.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-add_nodes"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-add_nodes}{}}}
\subsection{Method \code{add_nodes()}}{
Create an entry for \code{node} in the tracker. Assumes that
\code{node} is not in the tracker yet, and does not check if
this is the case.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$add_nodes(nodes, preference = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nodes}}{The name(s) of node(s) in the graph as a character vector.}

\item{\code{preference}}{TODO: recall what on earth this is.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-add_failed"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-add_failed}{}}}
\subsection{Method \code{add_failed()}}{
Add \code{node} to the list of nodes we failed to visit.
Assumes that \code{node} is not in the failed list yet, and
does not check if this is the case.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$add_failed(nodes)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nodes}}{The name of the node in the graph as a length 1
character vector.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-update_p"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-update_p}{}}}
\subsection{Method \code{update_p()}}{
Update the estimate of the personalized pagerank for a given node
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$update_p(node)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node}}{Character name of a node in the graph.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-update_r_neighbor"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-update_r_neighbor}{}}}
\subsection{Method \code{update_r_neighbor()}}{
Update the residual of a \emph{good} node in the neighborhood of
the current node, adding it to the tracker if necessary
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$update_r_neighbor(u, v)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{u}}{Character name of the node we are currently visiting.}

\item{\code{v}}{Names of neighbors of \code{u} as a character vector. Can
contain multiple elements. Can also contain zero elements.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-update_r_self"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-update_r_self}{}}}
\subsection{Method \code{update_r_self()}}{
Update the residual of current node
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$update_r_self(node)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node}}{Character name of the node we are currently visiting.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-regularize"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-regularize}{}}}
\subsection{Method \code{regularize()}}{
Compute the degree-adjusted and regularized variants of personalized
PageRank as in Algorithm 4, based on the outputs of Algorithm 3.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$regularize()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node}}{Character name of the node we are currently visiting.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-calculate_ppr"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-calculate_ppr}{}}}
\subsection{Method \code{calculate_ppr()}}{
Main driver function to perform the computations outlined in
Algorithm 3.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$calculate_ppr()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node}}{Character name of the node we are currently visiting.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Tracker-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Tracker-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Tracker$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
